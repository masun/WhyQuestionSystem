kent
beck
ward
cunningham
ron
jeffries
kent
beck
embrace
chrysler
comprehensive
compensation
chrysler
smalltalk
kent
beck
smalltalk
ward
cunningham
beck
ron
jeffries
jeffries
wikiwiki
cunningham
beck
extreme
programming
explained
beck
sdm
xp
kent
beck
optimism
in
extreme
programming
the
respect
xp
rome
xp
collective
ownership
within
xp
within
xp
because
xp
matt
stephens
doug
rosenberg
apress
case
against
xp
extreme
programming
extreme
programming
method
approach
software
engineering
popular
agile
software
development
methodology
formulate
write
book
topic
extreme
programming
explain
change
publish
edition
book
delf
philosophy
extreme
programming
describe
agile
methodology
attempt
route
advocate
paralyse
effect
rigid
center
project
methodology
chaos
result
methodology
time
claim
potential
avoid
personal
develop
sustainable
software
development
culture
promise
object
technology
launch
ambitious
project
failure
object
confer
numerous
advantage
reuse
panacea
hop
fluid
change
requirement
demand
short
traditional
method
development
require
extensive
design
front
penalize
design
cost
miss
milestone
project
start
determine
object
technology
payroll
system
object
research
language
gemstone
persistence
layer
bring
prominent
practitioner
performance
tuning
system
role
expand
note
issue
development
process
opportunity
propose
implement
practice
base
frequent
collaborator
invite
project
develop
refine
method
act
coach
instill
practice
habit
team
information
principle
practice
disseminate
wide
world
discussion
original
contributor
dissect
expand
idea
fervent
advocate
critic
picking
idea
agile
software
development
edit
series
book
beginning
extreme
programming
explain
spreading
idea
larger
receptive
audience
author
series
aspect
attending
practice
book
critical
practice
create
buzz
late
ninety
thousand
adoption
milieu
environment
radically
origin
discipline
require
original
practice
wayside
causing
practice
deprecate
left
undo
individual
site
agile
development
practice
stand
evolve
assimilate
lesson
experience
field
edition
add
practice
differentiate
primary
corollary
practice
main
aim
lower
cost
change
traditional
system
development
method
requirement
system
determine
beginning
development
project
fix
cost
change
requirement
stage
unthinkable
rapidly
change
concept
illustrate
graph
set
lower
cost
change
introduce
basic
principle
practice
apply
system
development
project
flexible
respect
graph
illustrate
intent
hem
cost
change
core
practice
extreme
programming
edition
extreme
programming
explain
practice
fine
scale
feedback
continuous
process
batch
share
understanding
programmer
welfare
edition
extreme
programming
explain
set
corollary
practice
addition
primary
practice
total
practice
edition
core
practice
derive
accept
practice
extreme
extreme
programming
team
person
claim
successfully
team
hundred
developer
scale
people
scale
proponent
refuse
speculate
facet
process
extreme
programming
initially
recognize
add
edition
extreme
programming
explain
fundamental
task
building
software
system
communicating
system
requirement
developer
system
formal
software
development
methodology
task
accomplish
documentation
extreme
programming
technique
view
method
rapidly
building
disseminate
institutional
knowledge
development
team
goal
developer
share
view
system
match
view
hold
user
system
extreme
programming
favor
simple
design
metaphor
collaboration
user
programmer
frequent
verbal
communication
feedback
extreme
programming
encourage
starting
simple
solution
difference
approach
conventional
system
development
method
focus
designing
coding
tomorrow
week
month
proponent
acknowledge
disadvantage
entail
effort
tomorrow
change
system
claim
compensate
advantage
investing
future
requirement
change
relevant
coding
designing
uncertain
future
requirement
imply
risk
spending
resource
relate
previous
communication
simplicity
design
coding
improve
quality
communication
simple
design
simple
code
easily
understand
programmer
team
extreme
programming
feedback
relate
dimension
system
development
feedback
closely
relate
communication
simplicity
flaw
system
easily
communicate
writing
unit
test
prof
piece
code
break
direct
feedback
system
programmer
recode
customer
test
system
periodically
functional
requirement
user
story
quote
occupational
hazard
programming
feedback
treatment
extreme
programming
doctrine
courage
system
development
explain
couple
practice
commandment
design
code
tomorrow
effort
avoid
design
require
lot
effort
implement
courage
enable
developer
feel
comfortable
code
review
exist
system
modify
future
implement
easily
courage
knowing
throw
code
programmer
experience
stick
complex
design
code
day
coming
day
fresh
view
rapidly
solving
half
hour
perspective
respect
team
short
cycle
continuous
integration
programmer
commit
break
compilation
exist
unit
test
fail
delay
peer
respect
striving
quality
seeking
design
solution
hand
principle
form
basis
base
intend
foster
decision
system
development
project
principle
intend
concrete
easily
translate
guidance
practical
situation
feedback
rapidly
time
action
feedback
critical
learning
extreme
programming
unlike
traditional
system
development
method
contact
customer
occur
iteration
customer
insight
system
develop
feedback
progress
steer
development
unit
test
contribute
rapid
feedback
principle
writing
code
unit
test
direct
feedback
system
react
instance
affect
system
scope
programmer
programmer
notice
flaw
chance
bug
system
production
assume
simplicity
treat
solve
extremely
simply
traditional
system
development
method
plan
future
code
extreme
programming
reject
idea
advocate
extreme
programming
build
day
extreme
programming
apply
incremental
system
release
week
step
customer
control
development
process
system
develop
uncertainty
principle
embracing
change
embracing
instance
iterative
meeting
customer
requirement
change
dramatically
programmer
embrace
plan
requirement
iteration
describe
basic
activity
perform
software
development
process
advocate
argue
product
system
development
process
code
concept
broad
definition
coding
coding
drawing
diagram
generate
code
script
base
system
programming
orient
program
compile
coding
figure
suitable
solution
instance
advocate
alternative
programming
simply
code
solution
determine
automate
test
discus
section
solution
suitable
coding
communicate
programming
programmer
dealing
complex
programming
finding
hard
explain
solution
fellow
programmer
code
code
demonstrate
code
exponent
position
concise
interpret
programmer
feedback
code
coding
test
testing
perceive
primary
customer
lot
software
ship
proper
testing
software
development
function
test
raise
question
defining
uncertain
programmer
necessarily
business
system
development
function
system
determine
business
programmer
functionality
system
listen
business
programmer
listen
listen
customer
understand
business
customer
feedback
improve
customer
understanding
communication
customer
programmer
address
planning
game
view
simplicity
system
development
coding
testing
listening
activity
perform
result
system
practice
designing
time
stick
system
complex
dependency
system
cease
avoid
create
design
structure
organize
logic
system
design
avoid
lot
dependency
system
change
system
affect
system
main
planning
process
extreme
programming
call
planning
game
section
explain
process
process
model
planning
process
divide
iteration
planning
plan
activity
task
developer
process
customer
involve
iteration
planning
consist
phase
iterative
process
gathering
requirement
estimate
impact
requirement
business
requirement
proceeds
commitment
phase
phase
involve
determination
cost
benefit
schedule
impact
component
business
sort
user
story
business
arrange
pile
developer
sort
user
story
risk
categorize
pile
low
medium
risk
user
story
approach
volatility
change
complexity
hard
build
index
user
story
add
assigning
user
story
risk
index
low
medium
steering
phase
programmer
business
people
steer
process
individual
user
story
relative
priority
user
story
change
estimate
prove
wrong
chance
adjust
plan
exploration
phase
iteration
planning
create
task
estimate
implementation
time
commitment
phase
iteration
planning
programmer
assign
task
reference
user
story
implementation
task
steering
phase
iteration
planning
pair
programming
code
produce
people
programming
task
workstation
programmer
control
workstation
thinking
coding
detail
programmer
focus
picture
continually
review
code
produce
programmer
programmer
trade
role
regularly
pair
fix
recommend
programmer
mix
familiar
system
pair
programming
enhance
wide
communication
hand
concept
collective
ownership
responsible
code
change
code
pair
programming
contribute
practice
pair
programmer
code
major
advantage
claim
collective
ownership
speed
development
process
error
occur
code
programmer
fix
giving
programmer
change
code
risk
error
introduce
programmer
foresee
dependency
define
unit
test
address
unforeseen
dependency
create
error
unit
test
run
failure
customer
pay
bill
system
customer
hand
time
question
instance
team
developing
financial
administration
system
include
financial
administrator
unit
test
automate
test
test
functionality
piece
code
class
method
unit
test
write
eventual
code
cod
approach
intend
stimulate
programmer
condition
code
fail
programmer
finish
piece
code
condition
code
fail
doctrine
advocate
programming
implement
simply
time
result
system
stick
symptom
dual
multiple
maintenance
functional
start
require
multiple
copy
similar
code
symptom
code
affect
lot
doctrine
occur
system
telling
code
change
architecture
simple
generic
extreme
programming
share
controversial
aspect
publish
book
call
extreme
programming
question
process
suggest
improve
trigger
lengthy
debate
article
internet
site
chat
core
argument
book
practice
interdependent
practical
organization
adopt
practice
entire
process
fail
book
criticism
draw
likeness
collective
ownership
model
socialism
negative
manner
aspect
change
book
publish
accommodate
modification
practice
require
objective
meet
increasingly
generic
term
process
argue
invalidate
previous
criticism
claim
simply
watering
process
recently
author
attempt
reconcile
method
seek
replace
waterfall
method
offer
unify
method
authoritative
background
reading
